package com.code.api.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.code.api.entity.Book;
import com.code.api.repository.BookRepository;
import com.code.api.services.BookService;


@RestController//Indicates that this class is a RESTful controller
@RequestMapping("/api/books")//maps the base URL to controller
public class BookController 
{
	private BookService bookService;
	public BookController(BookService bookService) 
	{
		this.bookService = bookService;
	}
	@GetMapping("/all")
    public List<Book> getAllBooks() {
        // Assume you have a service that fetches all books
        return bookService.getAllBooks();
    }
    @GetMapping("/search")
    public List<Book> filterBooks(@RequestParam(required = false) String title, 
                                  @RequestParam(required = false) String author) {
        return bookService.filterBooks(title, author);
    }
    @GetMapping("/")
    public List<Book> getBooks()
    {
    	return bookService.getBooks();
    }
    @PostMapping("/add")
    public Book addBook(@RequestBody Book book)
    {
    	return bookService.addBook(book);
    }
    @PutMapping("/edit/{id}")
    public Book addBook(@PathVariable int id, @RequestBody Book book)
    {
    	return bookService.updateBook(id,book);
    }
    @DeleteMapping("/delete/{id}")
    public String deleteBook(@PathVariable int id) 
    {
    	return bookService.deleteBook(id);
    }
    
    // Get a Book by its ID
    // Path Variables:
    //Fetch a book by its ID using a path variable.
   //End point to fetch a book by its ID using a path variable
    @GetMapping("/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable int id) 
    {
        Book book = bookService.getBookId(id);//calls the getBookId method from the bookService
        if (book != null) {
            return ResponseEntity.ok(book);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
